--------Praticando a implementaÃ§Ã£o de testes---------
VocÃª vai implementar vÃ¡rios testes em contextos diferentes a fim de consolidar a mecÃ¢nica e tambÃ©m a forma de pensar em testes.
Copie as funÃ§Ãµes jÃ¡ implementadas e desenvolva os testes. Separe as funÃ§Ãµes e os testes em arquivos diferentes para evitar qualquer tipo de problema.
Crie os arquivos com o respectivo nome da funÃ§Ã£o. Ex: sum.js e sum.test.js
Exporte a funÃ§Ã£o criada neste arquivo e importe no arquivo de teste. Ex:
module.exports = sum; no arquivo sum.js;
const sum = require('./sum.js'); no arquivo sum.test.js.
ğŸ‘€ Se o arquivo de teste nÃ£o estiver na mesma pasta da funÃ§Ã£o, Ã© importante especificar o caminho.
ğŸš€ 1 - A funÃ§Ã£o sum(a, b) retorna a soma do parÃ¢metro a com o b[]
1.1 - Teste se o retorno de sum(4, 5) Ã© 9
1.2 - Teste se o retorno de sum(0, 0) Ã© 0
1.3 - Teste se a funÃ§Ã£o sum lanÃ§a um erro quando os parÃ¢metros sÃ£o 4 e "5"(string 5)
1.4 - Teste se a mensagem de erro Ã© "parameters must be numbers" quando realizar a chamada sum(4, "5")
ğŸš€ 2 - A funÃ§Ã£o myRemove(arr, item) recebe um array arr e retorna uma cÃ³pia desse array sem o elemento item caso ele exista no array
2.1 - Verifique se a chamada myRemove([1, 2, 3, 4], 3) retorna o array esperado
2.2 - Verifique se a chamada myRemove([1, 2, 3, 4], 3) nÃ£o retorna o array [1, 2, 3, 4]
2.3 - Verifique se a chamada myRemove([1, 2, 3, 4], 5) retorna o array esperado
ğŸš€ 3 - A funÃ§Ã£o myFizzBuzz(num) recebe um nÃºmero num e retorna "fizzbuzz" se o nÃºmero for divisÃ­vel por 3 e 5, retorna "fizz" se for divisÃ­vel apenas por 3, retorna "buzz" se divisÃ­vel apenas por 5, retorna o prÃ³prio nÃºmero caso nÃ£o seja divisÃ­vel por 3 ou 5 e retorna false caso num nÃ£o seja um nÃºmero
3.1 - FaÃ§a uma chamada com um nÃºmero divisÃ­vel por 3 e 5 e verifique se o retorno Ã© o esperado
3.2 - FaÃ§a uma chamada com um nÃºmero divisÃ­vel por 3 e verifique se o retorno Ã© o esperado
3.3 - FaÃ§a uma chamada com um nÃºmero divisÃ­vel por 5 e verifique se o retorno Ã© o esperado
3.4 - FaÃ§a uma chamada com um nÃºmero que nÃ£o Ã© divisÃ­vel por 3 ou 5 e verifique se o retorno Ã© o esperado
3.5 - FaÃ§a uma chamada com um parÃ¢metro que nÃ£o Ã© um nÃºmero e verifique se o retorno Ã© o esperado
No Bloco 4 vocÃª desenvolveu um projeto para testar os seus conhecimentos em Javascript e lÃ³gica de programaÃ§Ã£o: o Playground functions. Nos exercÃ­cios a seguir, vocÃª irÃ¡ trabalhar com os testes para algumas funÃ§Ãµes que vocÃª criou! Aproveite para refatorÃ¡-las e usar todos os recursos que jÃ¡ aprendemos atÃ© aqui, como as Higher Order Functions e as features do Javascript ES6.
ğŸš€ 4 - Para as funÃ§Ãµes encode e decode crie os seguintes testes em Jest:
4.1 - Teste se encode e decode sÃ£o funÃ§Ãµes;
4.2 - Para a funÃ§Ã£o encode teste se as vogais a, e, i, o, u sÃ£o convertidas em 1, 2, 3, 4 e 5, respectivamente;
4.3 - Para a funÃ§Ã£o decode teste se os nÃºmeros 1, 2, 3, 4 e 5 sÃ£o convertidos nas vogais a, e, i, o, u, respectivamente;
4.4 - Teste se as demais letras/nÃºmeros nÃ£o sÃ£o convertidos para cada caso;
4.5 - Teste se a string que Ã© retornada pelas funÃ§Ãµes tÃªm o mesmo nÃºmero de caracteres que a string passada como parÃ¢metro.
ğŸš€ 5 - A funÃ§Ã£o techList recebe como parÃ¢metros um array contendo uma lista de tecnologias e uma string com um nome. Para cada tecnologia no array a funÃ§Ã£o cria, em ordem alfabÃ©tica, um objeto com a seguinte estrutura:
Implemente a funÃ§Ã£o techList a partir dos testes abaixo. Experimente refatorar a funÃ§Ã£o que vocÃª criou para esse projeto! Ã‰ importante nunca alterar os testes ou as variÃ¡veis jÃ¡ escritas no cÃ³digo.
ğŸš€ 6 - A funÃ§Ã£o hydrate recebe uma string no formato "numero bebida", e retorna a sugestÃ£o de quantos copos de Ã¡gua vocÃª deve beber para se hidratar. Para cada bebida, deve-se tomar um copo de Ã¡gua para nÃ£o ter ressaca. Exemplo:
Implemente a funÃ§Ã£o hydrate a partir dos testes abaixo. Experimente refatorar a funÃ§Ã£o que vocÃª criou para o projeto Playground Function! Ã‰ importante nunca alterar os testes ou as variÃ¡veis jÃ¡ escritas no cÃ³digo.
-------Parte bÃ´nus--------
ğŸš€ 1 - VocÃª estÃ¡ pronto para um desafio?! Neste exercÃ­cio, vocÃª irÃ¡ praticar o desenvolvimento orientado a testes implementando:
A funÃ§Ã£o;
Os testes para essa funÃ§Ã£o;
Considere os dados abaixo. VocÃª deve criar uma funÃ§Ã£o que receba dois parÃ¢metros: o id do funcionÃ¡rio e a informaÃ§Ã£o disponÃ­vel sobre ele (firstName, lastName, specialities). VocÃª tambÃ©m deverÃ¡ criar os testes para essa funÃ§Ã£o. Sua funÃ§Ã£o deverÃ¡ entÃ£o retornar os resultados da busca pelo id para aquele funcionÃ¡rio e a informaÃ§Ã£o consultada. Caso o id nÃ£o conste no quadro de funcionÃ¡rios, sua funÃ§Ã£o deve retornar o erro "ID nÃ£o identificada". Se a informaÃ§Ã£o que se quer acessar nÃ£o existir, a funÃ§Ã£o deve retornar o erro "InformaÃ§Ã£o indisponÃ­vel".