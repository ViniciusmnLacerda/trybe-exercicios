--------Praticando a implementa√ß√£o de testes---------
Voc√™ vai implementar v√°rios testes em contextos diferentes a fim de consolidar a mec√¢nica e tamb√©m a forma de pensar em testes.
Copie as fun√ß√µes j√° implementadas e desenvolva os testes. Separe as fun√ß√µes e os testes em arquivos diferentes para evitar qualquer tipo de problema.
Crie os arquivos com o respectivo nome da fun√ß√£o. Ex: sum.js e sum.test.js
Exporte a fun√ß√£o criada neste arquivo e importe no arquivo de teste. Ex:
module.exports = sum; no arquivo sum.js;
const sum = require('./sum.js'); no arquivo sum.test.js.
üëÄ Se o arquivo de teste n√£o estiver na mesma pasta da fun√ß√£o, √© importante especificar o caminho.
üöÄ 1 - A fun√ß√£o sum(a, b) retorna a soma do par√¢metro a com o b
1.1 - Teste se o retorno de sum(4, 5) √© 9
1.2 - Teste se o retorno de sum(0, 0) √© 0
1.3 - Teste se a fun√ß√£o sum lan√ßa um erro quando os par√¢metros s√£o 4 e "5"(string 5)
1.4 - Teste se a mensagem de erro √© "parameters must be numbers" quando realizar a chamada sum(4, "5")
üöÄ 2 - A fun√ß√£o myRemove(arr, item) recebe um array arr e retorna uma c√≥pia desse array sem o elemento item caso ele exista no array
2.1 - Verifique se a chamada myRemove([1, 2, 3, 4], 3) retorna o array esperado
2.2 - Verifique se a chamada myRemove([1, 2, 3, 4], 3) n√£o retorna o array [1, 2, 3, 4]
2.3 - Verifique se a chamada myRemove([1, 2, 3, 4], 5) retorna o array esperado
üöÄ 3 - A fun√ß√£o myFizzBuzz(num) recebe um n√∫mero num e retorna "fizzbuzz" se o n√∫mero for divis√≠vel por 3 e 5, retorna "fizz" se for divis√≠vel apenas por 3, retorna "buzz" se divis√≠vel apenas por 5, retorna o pr√≥prio n√∫mero caso n√£o seja divis√≠vel por 3 ou 5 e retorna false caso num n√£o seja um n√∫mero
3.1 - Fa√ßa uma chamada com um n√∫mero divis√≠vel por 3 e 5 e verifique se o retorno √© o esperado
3.2 - Fa√ßa uma chamada com um n√∫mero divis√≠vel por 3 e verifique se o retorno √© o esperado
3.3 - Fa√ßa uma chamada com um n√∫mero divis√≠vel por 5 e verifique se o retorno √© o esperado
3.4 - Fa√ßa uma chamada com um n√∫mero que n√£o √© divis√≠vel por 3 ou 5 e verifique se o retorno √© o esperado
3.5 - Fa√ßa uma chamada com um par√¢metro que n√£o √© um n√∫mero e verifique se o retorno √© o esperado